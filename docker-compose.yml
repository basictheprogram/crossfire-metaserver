---
services:
  traefik:
    image: traefik:3
    container_name: metaserver-traefik
    environment:
      - TZ=${TZ}
    ports:
      - 80:80
      - 443:443
    restart: always
    labels:
      # Traefik configuration
      - traefik.enable=true
      - traefik.docker.network=metaserver
      - traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080

      # HTTP router configuration
      - traefik.http.routers.traefik-dashboard-http.entrypoints=http
      - traefik.http.routers.traefik-dashboard-http.rule=Host(`traefik.${DOMAIN}`)

      # HTTPS router configuration (without certresolver)
      - traefik.http.routers.traefik-dashboard-https.entrypoints=https
      - traefik.http.routers.traefik-dashboard-https.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.traefik-dashboard-https.tls=true
      - traefik.http.routers.traefik-dashboard-https.tls.certresolver=le
      - traefik.http.routers.traefik-dashboard-https.service=api@internal

      # HTTPS redirect middleware
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      - traefik.http.routers.traefik-dashboard-http.middlewares=https-redirect

      # HTTP Basic Auth middleware
      - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME}:${HASHED_PASSWORD}
      - traefik.http.routers.traefik-dashboard-https.middlewares=admin-auth
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - traefik-public-certificates:/certificates
      - /var/log/traefik/:/var/log/traefik/
    command:
      # Docker provider configuration
      - --providers.docker
      - --providers.docker.exposedbydefault=false

      # Entrypoints configuration
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --entrypoints.http.forwardedHeaders.trustedIPs=0.0.0.0/0
      - --entrypoints.http.proxyProtocol.trustedIPs=0.0.0.0/0

      # Let's Encrypt configuration
      - --certificatesresolvers.le.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.tlschallenge=true

      # Logging and API configuration
      - --accesslog.filepath=/var/log/traefik/access.log
      - --accesslog.format=json
      - --accesslog.fields.defaultmode=keep
      - --accesslog.fields.headers.defaultmode=keep
      - --accesslog.fields.names.ClientHost=keep
      - --accesslog.fields.names.RequestAddr=keep
      - --accesslog.fields.names.RequestMethod=keep
      - --accesslog.fields.names.RequestPath=keep
      - --accesslog.fields.names.RequestProtocol=keep
      - --accesslog.fields.names.ResponseStatus=keep
      - --accesslog.fields.names.Duration=keep
      - --accesslog.fields.names.Referer=keep
      - --accesslog.fields.names.RequestUserAgent=keep
      - --accesslog.fields.names.StartUTC=drop
      - --accesslog.fields.names.StartLocal=keep
      - --log.level=INFO
      - --api
    networks:
      - metaserver

  mysql:
    container_name: metaserver-mysql
    image: mysql:lts
    restart: always
    volumes:
      - crossfire-metaserver-mysql-data:/var/lib/mysql
      - ./.devcontainer/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    environment:
      # Did to populate the environment? export $(grep -v '^#' .env | xargs)
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u $$MYSQL_USER --password=$MYSQL_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - "3306:3306"
    networks:
      - metaserver

  www:
    container_name: metaserver-www
    image: basictheprogram/crossfire-metaserver-www
    restart: always
    depends_on:
      - mysql
      - traefik
    # volumes:
    #   - crossfire-metaserver-html-files:/var/www/html/:cached
    environment:
      # Did to populate the environment? export $(grep -v '^#' .env | xargs)
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PWD=${DB_PWD}
      - DB_NAME=${DB_NAME}
      - APACHE_SERVER_ADMIN=${APACHE_SERVER_ADMIN}
      - APACHE_SERVER_NAME=${APACHE_SERVER_NAME}
      - TZ=${TZ}
    labels:
      - traefik.enable=true

      # Allow HTTP and HTTPS for /meta_client.php, /meta_html.php, /meta_update.php
      - traefik.http.routers.metaserver-http.rule=Host(`metaserver.${DOMAIN}`) || Host(`metaserver.us.${DOMAIN}`) && (Path(`/meta_client.php`) || Path(`/meta_html.php`) || Path(`/meta_update.php`))
      - traefik.http.routers.metaserver-http.entrypoints=http
      - traefik.http.routers.metaserver-http.service=metaserver-service

      - traefik.http.routers.metaserver-https.rule=Host(`metaserver.${DOMAIN}`) || Host(`metaserver.us.${DOMAIN}`) && (Path(`/meta_client.php`) || Path(`/meta_html.php`) || Path(`/meta_update.php`))
      - traefik.http.routers.metaserver-https.entrypoints=https
      - traefik.http.routers.metaserver-https.tls=true
      - traefik.http.routers.metaserver-https.tls.certresolver=le
      - traefik.http.routers.metaserver-https.service=metaserver-service

      # Allow only HTTPS for /v2/meta_client.php, /v2/meta_html.php, /v2/meta_update.php
      - traefik.http.routers.metaserver-v2-https.rule=Host(`metaserver.${DOMAIN}`) || Host(`metaserver.us.${DOMAIN}`) && (PathPrefix(`/v2/meta_client.php`) || PathPrefix(`/v2/meta_html.php`) || PathPrefix(`/v2/meta_update.php`))
      - traefik.http.routers.metaserver-v2-https.entrypoints=https
      - traefik.http.routers.metaserver-v2-https.tls=true
      - traefik.http.routers.metaserver-v2-https.tls.certresolver=le
      - traefik.http.routers.metaserver-v2-https.service=metaserver-service

      # Redirect all other HTTP traffic to HTTPS
      - traefik.http.routers.metaserver-http-redir.rule=Host(`metaserver.${DOMAIN}`) || Host(`metaserver.us.${DOMAIN}`)
      - traefik.http.routers.metaserver-http-redir.entrypoints=http
      - traefik.http.routers.metaserver-http-redir.middlewares=https-redirect@docker

      # Define the backend service
      - traefik.http.services.metaserver-service.loadbalancer.server.port=80
    networks:
      - metaserver

networks:
  metaserver:
    name: metaserver
    driver: bridge

volumes:
  crossfire-metaserver-mysql-data:
    driver: local
  traefik-public-certificates:
    driver: local
